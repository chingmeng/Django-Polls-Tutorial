
Pycharm steps to Setup dJango Project
-----------------------------------
1. File > Setting > Project Interpreter > Click on the green plus sign on the right

2. Search for dJango and install the package

3. Go to terminal, 
	$ python -m django --version

4. Make new directory with specified name
	$ django-admin startproject mysite

5. cd to the folder mysite

6. Run the server,
	$ python manage.py runserver
	$ python manage.py runserver 8080 (to run on specific port)
	
/ *
If you want to change the server’s IP, pass it along with the port. For example, to listen on all available public IPs (which is useful if you are running Vagrant or want to show off your work on other computers on the network), use:

$ python manage.py runserver 0:8000
0 is a shortcut for 0.0.0.0. Full docs for the development server can be found in the runserver reference.
*/

7. Create App by setting to the same directory to manage.py:
 	$ python manage.py startapp polls

8. Let’s write the first view. Open the file polls/views.py and put the following Python code in polls/views.py

	from django.http import HttpResponse

	def index(request):
	    	return HttpResponse("Hello, world. You're at the polls index.")

9. Map the view to a URL using URLconf, which to be create in the polls directory called url.py, and put the following code:
from django.urls import path

from . import views

	urlpatterns = [
 	   	path('', views.index, name='index'),
	]

10. Next, point the URLconf (url.py under mysite folder) of the mysite folder to the url.py of the polls app:

	from django.contrib import admin
	from django.urls import include, path

	urlpatterns = [
    		path('polls/', include('polls.urls')),
 	   	path('admin/', admin.site.urls),
	]

11. Run server and check the site (http://127.0.0.1:8000/polls) , you should see the view that return 
"Hello, world. You're at the polls index."


SETTING UP DATABASE
-------------------
12. Open up mysite/settings, note the following:
	TIME_ZONE (you can set you timezone here)
	INSTALLED_APPS (basically show you a list of dependency)

13. To create a database table, use the following program:
	$ python manage.py migrate
	(Look at INSTALLED_APPS setting, and create database tables according to mysite/settings.py and the database migrations shipped with the app)

14. To create models, go to model.py under mysite/polls,

	from django.db import models

	# Create your models here.

	class Question(models.Model):
    		question_text = models.CharField(max_length=200)
    		pub_date = models.DateTimeField('date published')
    
	class Choice(models.Model):
    		question = models.ForeignKey(Question, on_delete=models.CASCADE)
    		choice_text = models.CharField(max_length=200)
    		votes = models.IntegerField(default=0)

Each class represent a model by subclassing models.Model.
Each variable represent a field class in the database.
ForeignKey - Key for the question, putting under Choice linked it to the Question model.

*** Note Django apps are pluggable, you can move it between projects.

15. To activate a model, under mysite/settings.py then INSTALLED_APPS, include the apps as below:

INSTALLED_APPS = [
    'polls.apps.PollsConfig',  	   <<<<<< See here
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

16. Perform data migrations using the command below:
	$ python manage.py makemigrations polls

	Results: 
	Migrations for 'polls':
  	polls\migrations\0001_initial.py
    	- Create model Choice
    	- Create model Question
    	- Add field question to choice

17. Run sql migrations:
	 $ python manage.py sqlmigrate polls 0001

** Check problems in the project: $ python manage.py check

18. If model changes, remember these 2 steps:

	-- Change your models (in models.py).
	-- Run python manage.py makemigrations to create migrations for those changes
	-- Run python manage.py migrate to apply those changes to the database.

# https://stackoverflow.com/questions/29980211/django-1-8-whats-the-difference-between-migrate-and-makemigrations?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa
As Django's documentation says Migrations are Django’s way of propagating changes you make to your models (adding a field, deleting a model, etc.) into your database schema.

makemigrations basically generates the SQL commands for preinstalled apps (which can be viewed in installed apps in settings.py) and your newly created apps' model which you add in installed apps.It does not execute those commands in your database file. So tables doesn't created after makemigrations.

After applying makemigrations you can see those SQL commands with sqlmigrate which shows all the SQL commands which has been generated by makemigrations.

migrate executes those SQL commands in database file.So after executing migrate all the tables of your installed apps are created in your database file.

You can conform this by installing sqlite browser and opening db.sqlite3 you can see all the tables appears in the database file after executing migrate command.





